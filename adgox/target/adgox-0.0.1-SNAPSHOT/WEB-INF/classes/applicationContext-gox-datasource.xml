<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
   
  
   
   <!-- Hikari Datasource -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
        destroy-method="shutdown">
        <property name="driverClassName" value="${driverClass}" />
        <property name="jdbcUrl" value="${jdbcUrl}" />
        <property name="username" value="${user}" />
        <property name="password" value="${password}" />
        <!-- 连接只读数据库时配置为true， 保证安全 -->
        <property name="readOnly" value="false" />
        <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
        <property name="connectionTimeout" value="30000" />
        <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
        <property name="idleTimeout" value="600000" />
        <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
            wait_timeout参数（show variables like '%timeout%';） -->
        <property name="maxLifetime" value="1800000" />
        <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
        <property name="maximumPoolSize" value="17" />
        <property name="minimumIdle" value="6" />
    </bean>
    
	
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"  lazy-init="true">
        <property name="dataSource" ref="dataSource" />
        <property name="mappingResources">
             <list>
                <value>Order.hbm.xml</value>
                <value>OrderRecord.hbm.xml</value>
                <value>User.hbm.xml</value>
                <value>Device.hbm.xml</value>
                <value>Jifen.hbm.xml</value>
                <value>Record.hbm.xml</value>
                <value>Address.hbm.xml</value>
                <value>Invitation.hbm.xml</value>
               <!--  <value>Recevinginfo.hbm.xml</value>
                <value>Account.hbm.xml</value> -->
            </list>
        </property>
        <property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.query.substitutions">true 'Y', false 'N'</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop><!--
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				--><prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.jdbc.batch_size">25</prop>
				<prop key="hibernate.connection.release_mode">after_transaction</prop> 
				<!-- <prop key="hibernate.connection.release_mode">on_close</prop>-->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
			    <prop key="hibernate.hbm2ddl.auto">update</prop>   
			</props>
        </property>
		<!--<property name="lobHandler" ref="oracleLobHandle" />-->
    </bean>
    
   

	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- 添加jdbc的任务管理器 -->
	<!--<bean  id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"></property>
	</bean>
	--><bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!--
    
	<aop:config>
        <aop:pointcut id="interceptorPointCuts" expression="execution(* com.fx.cloud.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />        
    </aop:config> 

	 Enable @Configured support 
	<tx:advice id="txAdvice"  transaction-manager="transactionManager">
		<tx:attributes>
			 Read-only commented out to make things easier for end-users 
			 http://issues.appfuse.org/browse/APF-556 
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	
--></beans>

























